name: 'Preternatural Build Action'
description: 'Run Preternatural build command on repositories with a specified Xcode version'
inputs:
  derived_data_path:
    description: 'The path to the derived data folder'
    required: false
  platforms:
    description: 'Target platforms (array of: iOS, macOS, tvOS, watchOS, visionOS, all)'
    required: false
    default: '["macOS"]'
  xcode-version:
    description: 'Xcode version to use'
    required: true
  configurations:
    description: 'Build configurations (array of: debug, release)'
    required: false
    default: '["debug", "release"]'
runs:
  using: 'composite'
  steps:
    - name: Install Preternatural
      if: ${{ !env.ACT }} # Skipping when run locally.
      shell: bash
      run: |
        brew tap PreternaturalAI/preternatural
        brew install preternatural

    - name: Cache derived data
      uses: actions/cache@v3
      if: ${{ !env.ACT }} # Skipping when run locally.
      with:
        path: ${{ inputs.derived_data_path || '~/Library/Developer/Xcode/DerivedData' }}
        key: ${{ runner.os }}-derived-data-xcode-${{ inputs.xcode-version }}
        restore-keys: |
          ${{ runner.os }}-derived-data-xcode-${{ inputs.xcode-version }}
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: ${{ inputs.xcode-version }}

    - name: Create project build script
      shell: bash
      run: |
        echo "==== Create Project Build Script ===="
        PLATFORMS=$(echo '${{ inputs.platforms }}' | tr -d '[]' | sed 's/, /,/g')
        CONFIGURATIONS=$(echo '${{ inputs.configurations }}' | tr -d '[]' | sed 's/, /,/g')
        DERIVED_DATA_PATH="${{ inputs.derived_data_path }}"
        if [ -z "$DERIVED_DATA_PATH" ]; then
          DERIVED_DATA_PATH="$HOME/Library/Developer/Xcode/DerivedData/ProjectBuild"
        fi

        echo "PLATFORMS: $PLATFORMS"
        echo "CONFIGURATIONS: $CONFIGURATIONS"
        echo "DERIVED_DATA_PATH: $DERIVED_DATA_PATH"
        cat > project_build_utils.sh << EOF
        #!/bin/bash
        PLATFORMS="${PLATFORMS}"
        CONFIGURATIONS="${CONFIGURATIONS}"
        DERIVED_DATA_PATH="${DERIVED_DATA_PATH}"
        project_build_cmd() {
        cmd="preternatural build"
          if [[ -n "\${DERIVED_DATA_PATH}" ]]; then
            cmd="\$cmd --derived-data-path \$(printf %q "\${DERIVED_DATA_PATH}")"
          fi
          if [[ -n "\${PLATFORMS}" ]]; then
            cmd="\$cmd --platforms \${PLATFORMS}"
          fi
          if [[ -n "\${CONFIGURATIONS}" ]]; then
            cmd="\$cmd --configurations \${CONFIGURATIONS}"
          fi
          echo "\$cmd"
        }
        EOF
        chmod +x project_build_utils.sh
        export PLATFORMS
        export CONFIGURATIONS
        echo "=================================="
      
    - name: Execute project build command
      id: build
      shell: bash
      env:
        DERIVED_DATA_PATH: ${{ inputs.derived_data_path }}
      run: |
        echo "==== Execute Project Build Command ===="
        source project_build_utils.sh
        echo "Loaded project_build_utils.sh"
        defaults write com.apple.dt.Xcode IDESkipMacroFingerprintValidation -bool YES
        echo "Set IDESkipMacroFingerprintValidation"
        COMMAND=$(project_build_cmd)
        echo "Executing command: $COMMAND"
        eval "$COMMAND"
        echo "Command execution completed with status: $?"
        echo "=================================="
      continue-on-error: true

    - name: Clear caches and retry build
      id: retry_build
      if: steps.build.outcome == 'failure'
      shell: bash
      env:
        DERIVED_DATA_PATH: ${{ inputs.derived_data_path }}
      run: |
        echo "==== Clear Caches And Retry Build ===="
        echo "Previous cache status was: ${{ steps.cache-derived-data.outputs.cache-hit == 'true' && 'hit' || 'miss' }}"
        source project_build_utils.sh
        echo "Initial build failed. Clearing caches and retrying..."
        
        # Allow individual commands to fail without stopping the script
        set +e
        
        # Clear SwiftPM caches
        if [ "${{ env.ACT }}" != "true" ]; then
          echo "Clearing SwiftPM caches..."
          rm -rf "$HOME/Library/org.swift.swiftpm"
          rm -rf "$HOME/Library/Caches/org.swift.swiftpm"
        fi
        # Force package update
        echo "Updating Swift package..."
        echo "Current directory: $(pwd)"

        rm -rf .build
        swift package update
        echo "Package update completed with status: $?"
        swift package resolve
        echo "Package resolve completed with status: $?"
        echo "Updated Package.resolved content:"
        cat Package.resolved || echo "No Package.resolved found after update"
        
        echo "Clearing derived data..."
        # Clear derived data
        rm -rf "$DERIVED_DATA_PATH"
        echo "Derived data cleared status: $?"
        
        echo "Retrying build..."
        # Retry build
        COMMAND=$(project_build_cmd)
        echo "Retrying command: $COMMAND"
        eval "$COMMAND"
        # Capture the exit code of the last command (the build retry)
        BUILD_EXIT_CODE=$?
        
        echo "Retry build completed with status: $BUILD_EXIT_CODE"
        # Exit with the build's exit code
        exit $BUILD_EXIT_CODE
        echo "=================================="
      
    - name: Find and copy all xcactivity logs
      if: failure()
      shell: bash
      run: |
        if [ -n "${{ inputs.derived_data_path }}" ]; then
          DERIVED_DATA_PATH="${{ inputs.derived_data_path }}"
        else
          DERIVED_DATA_PATH="$HOME/Library/Developer/Xcode/DerivedData"
        fi
        echo "Searching for logs in: $DERIVED_DATA_PATH"
        
        mkdir -p ./artifacts
        
        # Find all xcactivitylog files and copy them to the artifacts directory
        find "$DERIVED_DATA_PATH" -name "*.xcactivitylog" -type f -print0 | while IFS= read -r -d '' log; do
          cp "$log" "./artifacts/$(basename "$log")"
          echo "Copied $log to ./artifacts/"
        done
        
        # Debug information
        echo "List of copied log files:"
        ls -l ./artifacts/*.xcactivitylog
        echo "Total size of copied logs:"
        du -sh ./artifacts
        
        # Check if any logs were found and copied
        if [ -z "$(ls -A ./artifacts)" ]; then
          echo "No xcactivitylog files found in $DERIVED_DATA_PATH"
          exit 1
        fi

    - name: Install xclogparser
      if: failure()
      shell: bash
      run: |
        brew install xclogparser

    - name: Convert logs to JSON and print
      if: failure()
      shell: bash
      run: |
        mkdir -p ./json_logs
        for log in ./artifacts/*.xcactivitylog; do
          json_file="./json_logs/$(basename "$log" .xcactivitylog).json"
          xclogparser parse --file "$log" --reporter json --output "$json_file"
          echo "Contents of $json_file:"
          cat "$json_file"
          echo "--------------------------------"
        done

    - name: Upload xcactivity logs (JSON)
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: xcactivity-logs-json
        path: ./json_logs/*.json
        if-no-files-found: error

    - name: Upload xcactivity logs (Raw)
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: xcactivity-logs-raw
        path: ./artifacts/*.xcactivitylog
        if-no-files-found: error
