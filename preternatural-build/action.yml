name: 'Preternatural Build Action'
description: 'Run Preternatural build command on repositories with a specified Xcode version'
inputs:
  derived_data_path:
    description: 'The path to the derived data folder'
    required: false
  build_all_platforms:
    description: 'Builds for all supported platforms'
    required: false
    default: 'false'
  xcode-version:
    description: 'Xcode version to use'
    required: true
  architectures:
    description: 'Comma-separated list of architectures to build for (e.g., "arm64,x86_64")'
    required: false
  configuration:
    description: 'Build configuration (debug or release)'
    required: false
    default: 'debug'
runs:
  using: 'composite'
  steps:
    - name: Install Preternatural
      if: ${{ !env.ACT }} # Skipping when run locally.
      shell: bash
      run: |
        brew tap PreternaturalAI/preternatural
        brew install preternatural
    - name: Cache derived data
      uses: actions/cache@v3
      if: ${{ !env.ACT }} # Skipping when run locally.
      with:
        path: ${{ inputs.derived_data_path || '$HOME/Library/Developer/Xcode/DerivedData' }}
        key: ${{ runner.os }}-derived-data-xcode-${{ inputs.xcode-version }}
        restore-keys: |
          ${{ runner.os }}-derived-data-xcode-${{ inputs.xcode-version }}
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: ${{ inputs.xcode-version }}
      
    - name: Execute Preternatural build command
      id: build
      shell: bash
      run: |
        defaults write com.apple.dt.Xcode IDESkipMacroFingerprintValidation -bool YES
        COMMAND="preternatural build"
        if [ -n "${{ inputs.derived_data_path }}" ]; then
          COMMAND="$COMMAND --derived-data-path '${{ inputs.derived_data_path }}'"
        fi
        if [ "${{ inputs.build_all_platforms }}" == "true" ]; then
          COMMAND="$COMMAND --build-all-platforms"
        fi
        if [ -n "${{ inputs.architectures }}" ]; then
          COMMAND="$COMMAND --architectures '${{ inputs.architectures }}'"
        fi
        if [ -n "${{ inputs.configuration }}" ]; then
          COMMAND="$COMMAND --configuration '${{ inputs.configuration }}'"
        fi
        echo "Executing command: $COMMAND"
        eval $COMMAND
      continue-on-error: true
    - name: Clear caches and retry build
      id: retry_build
      if: steps.build.outcome == 'failure'
      shell: bash
      run: |
        echo "Initial build failed. Clearing caches and retrying..."
        
        # Allow individual commands to fail without stopping the script
        set +e
        
        # Clear SwiftPM caches
        if [ "${{ !env.ACT }}" == "true" ]; then
          rm -rf $HOME/Library/org.swift.swiftpm
          rm -rf $HOME/Library/Caches/org.swift.swiftpm
        fi
        
        # Force package update
        rm -rf .build
        swift package update
        swift package resolve
        
        # Clear derived data
        if [ -n "${{ inputs.derived_data_path }}" ]; then
          rm -rf "${{ inputs.derived_data_path }}"
        else
          rm -rf $HOME/Library/Developer/Xcode/DerivedData
        fi
        
        # Retry build
        COMMAND="preternatural build"
        if [ -n "${{ inputs.derived_data_path }}" ]; then
          COMMAND="$COMMAND --derived-data-path '${{ inputs.derived_data_path }}'"
        fi
        if [ "${{ inputs.build_all_platforms }}" == "true" ]; then
          COMMAND="$COMMAND --build-all-platforms"
        fi
        if [ -n "${{ inputs.architectures }}" ]; then
          COMMAND="$COMMAND --architectures '${{ inputs.architectures }}'"
        fi
        if [ -n "${{ inputs.configuration }}" ]; then
          COMMAND="$COMMAND --configuration '${{ inputs.configuration }}'"
        fi
        echo "Retrying command: $COMMAND"
        eval $COMMAND
        
        # Capture the exit code of the last command (the build retry)
        BUILD_EXIT_CODE=$?
        
        # Exit with the build's exit code
        exit $BUILD_EXIT_CODE
    
    - name: Find and copy all xcactivity logs
      if: failure()
      shell: bash
      run: |
        if [ -n "${{ inputs.derived_data_path }}" ]; then
          DERIVED_DATA_PATH="${{ inputs.derived_data_path }}"
        else
          DERIVED_DATA_PATH="$HOME/Library/Developer/Xcode/DerivedData"
        fi
        echo "Searching for logs in: $DERIVED_DATA_PATH"
        
        mkdir -p ./artifacts
        
        # Find all xcactivitylog files and copy them to the artifacts directory
        find "$DERIVED_DATA_PATH" -name "*.xcactivitylog" -type f -print0 | while IFS= read -r -d '' log; do
          cp "$log" "./artifacts/$(basename "$log")"
          echo "Copied $log to ./artifacts/"
        done
        
        # Debug information
        echo "List of copied log files:"
        ls -l ./artifacts/*.xcactivitylog
        echo "Total size of copied logs:"
        du -sh ./artifacts
        
        # Check if any logs were found and copied
        if [ -z "$(ls -A ./artifacts)" ]; then
          echo "No xcactivitylog files found in $DERIVED_DATA_PATH"
          exit 1
        fi

    - name: Upload xcactivity logs
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: xcactivity-logs
        path: ./artifacts/*.xcactivitylog
        if-no-files-found: error