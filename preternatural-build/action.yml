name: 'Preternatural Build Action'
description: 'Run Preternatural build command on repositories with a specified Xcode version'
inputs:
  derived_data_path:
    description: 'The path to the derived data folder'
    required: false
  platforms:
    description: 'Target platforms (comma-separated: ios,macos,tvos,watchos,visionos,all)'
    required: false
    default: 'macos'
  xcode-version:
    description: 'Xcode version to use'
    required: true
  configurations:
    description: 'Build configurations (comma-separated: debug,release)'
    required: false
    default: 'debug,release'
  preternaturalSource:
    description: 'Source of preternatural (comma-separated: sourcecode, homebrew)'
    required: false
    default: 'sourcecode'
      
permissions:
  actions: read
  pages: write
  id-token: write

runs:
  using: 'composite'
  steps:
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: ${{ inputs.xcode-version }}

    - name: Cache derived data
      id: cache-derived-data
      uses: actions/cache@v4
      if: ${{ !env.ACT && inputs.preternaturalSource == 'sourcecode' }}
      with:
        path: ${{ inputs.derived_data_path || '$HOME/Library/Developer/Xcode/DerivedData' }}
        key: derived-data-v1-${{ runner.os }}-xcode${{ inputs.xcode-version }}-${{ hashFiles('Package.resolved') }}

    - name: Debug Cache Status
      if: ${{ !env.ACT && inputs.preternaturalSource == 'sourcecode' }}
      shell: bash
      run: |
        echo "==== Derived Data Cache Status ===="
        echo "Current directory: $(pwd)"
        echo "Package.resolved exists: ${{ hashFiles('Package.resolved') != '' }}"
        echo "Package.resolved location: $(find . -name Package.resolved)"
        echo "Cache key: derived-data-v1-${{ runner.os }}-xcode${{ inputs.xcode-version }}-${{ hashFiles('Package.resolved') }}"
        echo "Cache result: ${{ steps.cache-derived-data.outputs.cache-hit == 'true' && 'hit' || 'miss' }}"
        if [ "${{ steps.cache-derived-data.outputs.cache-hit }}" == "true" ]; then
          echo "Using cached derived data"
          DERIVED_DATA_PATH="${{ inputs.derived_data_path }}"
          if [ -z "$DERIVED_DATA_PATH" ]; then
            DERIVED_DATA_PATH="$HOME/Library/Developer/Xcode/DerivedData"
          fi
          echo "Derived data location: $DERIVED_DATA_PATH"
          echo "Derived data contents:"
          ls -la "$DERIVED_DATA_PATH" || echo "Unable to list derived data directory"
          echo "Derived data size:"
          du -sh "$DERIVED_DATA_PATH" 2>/dev/null || echo "Unable to get derived data size"
        else
          echo "Cache miss - will build from scratch"
        fi
        echo "=================================="

    - name: Checkout Preternatural
      if: ${{ !env.ACT && inputs.preternaturalSource == 'sourcecode' }}
      uses: actions/checkout@v4
      with:
        repository: PreternaturalAI/command-line-tool
        path: .preternatural-source
        token: ${{ secrets.PRETERNATURAL_GITHUB_ACTION }}
        ref: main

    - name: Install/Build Preternatural
      if: ${{ !env.ACT }} # Skipping when run locally.
      shell: bash
      run: |
        echo "==== Starting Install/Build Preternatural ===="
        if [ "${{ inputs.preternaturalSource }}" == "sourcecode" ] && [ ! -d ".preternatural-source" ]; then
          echo "Error: Source directory .preternatural-source not found"
          exit 1
        fi
        echo "Cache status: ${{ steps.cache-derived-data.outputs.cache-hit == 'true' && 'hit' || 'miss' }}"
        echo "PreternaturalSource: ${{ inputs.preternaturalSource }}"
        echo "Xcode Version: ${{ inputs.xcode-version }}"

        DERIVED_DATA_PATH="${{ inputs.derived_data_path }}"
        echo "Initial DERIVED_DATA_PATH: $DERIVED_DATA_PATH"
        if [ -z "$DERIVED_DATA_PATH" ]; then
          DERIVED_DATA_PATH="$HOME/Library/Developer/Xcode/DerivedData"
          echo "Using default DERIVED_DATA_PATH: $DERIVED_DATA_PATH"
        fi

        # Install/build based on source
        case "${{ inputs.preternaturalSource }}" in
          "homebrew")
            echo "Installing Preternatural via Homebrew..."
            echo "Running brew update..."
            brew update
            echo "Tapping PreternaturalAI/preternatural..."
            brew tap PreternaturalAI/preternatural
            echo "Installing preternatural..."
            brew install preternatural
            echo "Homebrew installation complete"
            echo "Verifying installation:"
            which preternatural
            preternatural --version || echo "Could not get version"
            ;;
            
          "sourcecode")
            echo "Building Preternatural from source..."
            echo "Current directory: $(pwd)"
            cd .preternatural-source
            echo "Changed to directory: $(pwd)"
            
            echo "Installing xcbeautify..."
            brew install xcbeautify
            echo "xcbeautify version: $(xcbeautify --version)"
            
            echo "Getting tool name from package..."
            TOOL_NAME=$(swift package describe --type json 2>/dev/null | jq -r '.name')
            echo "Tool name: $TOOL_NAME"
            echo "Package.resolved content:"
            cat Package.resolved || echo "No Package.resolved found"
            
            echo "Xcode configuration:"
            xcodebuild -version
            echo "Available schemes:"
            xcodebuild -list
            echo "Derived data path status:"
            ls -la "$DERIVED_DATA_PATH" || echo "Derived data path doesn't exist yet"

            echo "Running xcodebuild..."
            xcrun xcodebuild -scheme "$TOOL_NAME" \
            -destination generic/platform='macOS' \
            -configuration debug \
            -derivedDataPath "$DERIVED_DATA_PATH" build | xcbeautify --renderer github-actions
            
            BUILD_STATUS=$?
            echo "xcodebuild exit status: $BUILD_STATUS"
            if [ $BUILD_STATUS -ne 0 ]; then
              echo "xcodebuild failed"
              exit $BUILD_STATUS
            fi

            echo "Build complete, searching for binary..."
            # Find the binary - try multiple possible locations
            BINARY_PATHS=(
              "$DERIVED_DATA_PATH/Build/Products/Debug/preternatural"                    # Standard xcodebuild path
              "$DERIVED_DATA_PATH/preternatural-source/.build/Debug/preternatural"      # SwiftPM build path
              "$DERIVED_DATA_PATH/Build/Products/Debug/$TOOL_NAME"                      # Using scheme name
              ".build/debug/preternatural"                                              # Local SwiftPM path
            )

            echo "Checking possible binary locations:"
            BINARY_PATH=""
            for path in "${BINARY_PATHS[@]}"; do
              echo "Checking: $path"
              if [ -f "$path" ]; then
                echo "Found binary at: $path"
                BINARY_PATH="$path"
                break
              else
                echo "Not found at: $path"
              fi
            done
            
            if [ -z "$BINARY_PATH" ]; then
              echo "Error: Could not find preternatural binary in expected locations"
              echo "Contents of derived data directory:"
              ls -R "$DERIVED_DATA_PATH"
              exit 1
            fi

            echo "Creating symlink: $BINARY_PATH -> /usr/local/bin/preternatural"
            ln -sf "$BINARY_PATH" /usr/local/bin/preternatural
            echo "Verifying symlink:"
            ls -l /usr/local/bin/preternatural
            which preternatural
            ;;
            
          *)
            echo "Invalid preternaturalSource: ${{ inputs.preternaturalSource }}"
            exit 1
            ;;
        esac

    - name: Create build script
      shell: bash
      run: |
        cat > build_utils.sh << 'EOF'
        build_cmd() {
          cmd="preternatural build"
          if [ -n "$DERIVED_DATA_PATH" ]; then
            cmd="$cmd --derived-data-path $(printf %q "$DERIVED_DATA_PATH")"
          fi
          if [ -n "$PLATFORMS" ]; then
            cmd="$cmd --platforms $PLATFORMS"
          fi
          if [ -n "$CONFIGURATIONS" ]; then
            cmd="$cmd --configurations $CONFIGURATIONS"
          fi
          echo "$cmd"
        }
        EOF
      
    - name: Execute Preternatural build command
      id: build
      shell: bash
      env:
        DERIVED_DATA_PATH: ${{ inputs.derived_data_path }}
        PLATFORMS: ${{ inputs.platforms }}
        CONFIGURATIONS: ${{ inputs.configurations }}
      run: |
        echo "==== Starting Execute Preternatural build command ===="
        echo "Environment variables:"
        echo "DERIVED_DATA_PATH: $DERIVED_DATA_PATH"
        echo "PLATFORMS: $PLATFORMS"
        echo "CONFIGURATIONS: $CONFIGURATIONS"

        source build_utils.sh
        echo "Loaded build_utils.sh"
        defaults write com.apple.dt.Xcode IDESkipMacroFingerprintValidation -bool YES
        echo "Set IDESkipMacroFingerprintValidation"
        COMMAND=$(build_cmd)
        echo "Executing command: $COMMAND"
        eval "$COMMAND"
        echo "Command execution completed with status: $?"
        echo "==== Completed Execute Preternatural build command ===="
      continue-on-error: true

    - name: Clear caches and retry build
      id: retry_build
      if: steps.build.outcome == 'failure'
      shell: bash
      env:
        DERIVED_DATA_PATH: ${{ inputs.derived_data_path }}
        PLATFORMS: ${{ inputs.platforms }}
        CONFIGURATIONS: ${{ inputs.configurations }}
      run: |
        echo "==== Starting Clear caches and retry build ===="
        echo "Previous cache status was: ${{ steps.cache-derived-data.outputs.cache-hit == 'true' && 'hit' || 'miss' }}"
        source build_utils.sh
        echo "Initial build failed. Clearing caches and retrying..."
        
        # Allow individual commands to fail without stopping the script
        set +e
        
        # Clear SwiftPM caches
        if [ "${{ env.ACT }}" != "true" ]; then
          echo "Clearing SwiftPM caches..."
          rm -rf "$HOME/Library/org.swift.swiftpm"
          rm -rf "$HOME/Library/Caches/org.swift.swiftpm"
        fi

        # Force package update
        echo "Updating Swift package..."
        echo "Current directory: $(pwd)"
        if [ -d ".preternatural-source" ]; then
          cd .preternatural-source
          echo "Changed to directory: $(pwd)"
        fi

        rm -rf .build
        swift package update
        echo "Package update completed with status: $?"
        swift package resolve
        echo "Package resolve completed with status: $?"
        echo "Updated Package.resolved content:"
        cat Package.resolved || echo "No Package.resolved found after update"
        
        echo "Clearing derived data..."
        # Clear derived data
        rm -rf "$DERIVED_DATA_PATH"
        echo "Derived data cleared status: $?"
        
        echo "Retrying build..."
        # Retry build
        COMMAND=$(build_cmd)
        echo "Retrying command: $COMMAND"
        eval "$COMMAND"

        # Capture the exit code of the last command (the build retry)
        BUILD_EXIT_CODE=$?
        
        echo "Retry build completed with status: $BUILD_EXIT_CODE"
        echo "==== Completed Clear caches and retry build ===="
        # Exit with the build's exit code
        exit $BUILD_EXIT_CODE
    
    - name: Find and copy all xcactivity logs
      if: failure()
      shell: bash
      run: |
        DERIVED_DATA_PATH="${{ inputs.derived_data_path }}"
        if [ -z "$DERIVED_DATA_PATH" ]; then
          DERIVED_DATA_PATH="$HOME/Library/Developer/Xcode/DerivedData"
        fi
        echo "Searching for logs in: $DERIVED_DATA_PATH"
        
        if [ ! -d "$DERIVED_DATA_PATH" ]; then
          echo "Derived data directory doesn't exist at: $DERIVED_DATA_PATH"
          echo "This might be normal if build failed very early"
          exit 0  # Don't fail the step if directory doesn't exist
        fi
        
        mkdir -p ./artifacts
        
        # Find all xcactivitylog files and copy them to the artifacts directory
        FOUND_LOGS=0
        find "$DERIVED_DATA_PATH" -name "*.xcactivitylog" -type f -print0 | while IFS= read -r -d '' log; do
          cp "$log" "./artifacts/$(basename "$log")"
          echo "Copied $log to ./artifacts/"
          FOUND_LOGS=1
        done
        
        if [ $FOUND_LOGS -eq 0 ]; then
          echo "No xcactivitylog files found in $DERIVED_DATA_PATH"
          echo "This might be normal if build failed very early"
          exit 0  # Don't fail just because we found no logs
        fi
        
        # Debug information
        echo "List of copied log files:"
        ls -l ./artifacts/*.xcactivitylog || echo "No logs to list"
        echo "Total size of copied logs:"
        du -sh ./artifacts || echo "No logs to measure"

    - name: Install xclogparser
      if: failure()
      shell: bash
      run: |
        brew install xclogparser

    - name: Convert logs to JSON and print
      if: failure()
      shell: bash
      run: |
        if [ ! -d "./artifacts" ] || [ -z "$(ls -A ./artifacts)" ]; then
          echo "No logs to convert"
          exit 0
        fi

        mkdir -p ./json_logs
        for log in ./artifacts/*.xcactivitylog; do
          json_file="./json_logs/$(basename "$log" .xcactivitylog).json"
          xclogparser parse --file "$log" --reporter json --output "$json_file"  # Added --reporter json
          echo "Contents of $json_file:"
          cat "$json_file"
          echo "--------------------------------"
        done

    - name: Upload xcactivity logs (JSON)
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: xcactivity-logs-json
        path: ./json_logs/*.json
        if-no-files-found: warn

    - name: Upload xcactivity logs (Raw)
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: xcactivity-logs-raw
        path: ./artifacts/*.xcactivitylog
        if-no-files-found: warn
